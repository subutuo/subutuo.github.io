{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/react/Hook 사용 규칙/","result":{"data":{"markdownRemark":{"html":"<h1>Hook의 규칙</h1>\n<p>Hook은 JavaScript 함수입니다. 하지만 Hook을 사용할 때는 두 가지 규칙을 준수해야 합니다.</p>\n<h3>최상위(at the Top Level)에서만 Hook을 호출해야 합니다</h3>\n<p><strong>반복문, 조건문 혹은 중첩된 함수 내에서 Hook을 호출하지 마세요.</strong> 대신 early return이 실행되기 전에 항상 React 함수의 최상위(at the top level)에서 Hook을 호출해야 합니다. 이 규칙을 따르면 컴포넌트가 렌더링 될 때마다 항상 동일한 순서로 Hook이 호출되는 것이 보장됩니다. 이러한 점은 React가 <code>useState</code> 와 <code>useEffect</code> 가 여러 번 호출되는 중에도 Hook의 상태를 올바르게 유지할 수 있도록 해줍니다.</p>\n<h3>오직 React 함수 내에서 Hook을 호출해야 합니다</h3>\n<p><strong>Hook을 일반적인 JavaScript 함수에서 호출하지 마세요.</strong> 대신 아래와 같이 호출할 수 있습니다.</p>\n<ul>\n<li>✅ React 함수 컴포넌트에서 Hook을 호출하세요.</li>\n<li>✅ Custom Hook에서 Hook을 호출하세요.</li>\n</ul>\n<p>이 규칙을 지키면 컴포넌트의 모든 상태 관련 로직을 소스코드에서 명확하게 보이도록 할 수 있습니다.</p>\n<h2>ESLint 플러그인</h2>\n<p>우리는 이 두 가지 규칙을 강제하는 <a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\"><code>eslint-plugin-react-hooks</code></a> 라는 ESLint 플러그인을 출시했습니다. 이 플러그인을 프로젝트에 추가할 수 있습니다.</p>\n<p>이 플러그인은 <a href=\"https://ko.reactjs.org/docs/create-a-new-react-app.html#create-react-app\">Create React App</a>에 기본적으로 포함되어 있습니다.</p>\n<pre class=\"grvsc-container abyss grvsc-ps-t4tStz\" data-language=\"\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">npm install eslint-plugin-react-hooks --save-dev</span></span></code></pre>\n<pre class=\"grvsc-container abyss grvsc-ps-t4tStz\" data-language=\"\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">// ESLint 설정 파일</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">{</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &quot;plugins&quot;: [</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    &quot;react-hooks&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ],</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &quot;rules&quot;: {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    &quot;react-hooks/rules-of-hooks&quot;: &quot;error&quot;, // Checks rules of Hooks</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    &quot;react-hooks/exhaustive-deps&quot;: &quot;warn&quot; // Checks effect dependencies</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<h2>설명</h2>\n<p><a href=\"https://ko.reactjs.org/docs/hooks-state.html#tip-using-multiple-state-variables\">이전에 배웠듯이</a> 한 컴포넌트에서 State나 Effect Hook을 여러 개 사용할 수도 있습니다.</p>\n<pre class=\"grvsc-container abyss grvsc-ps-t4tStz\" data-language=\"\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function Form() {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  // 1. name이라는 state 변수를 사용하세요.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  const [name, setName] = useState(&#39;Mary&#39;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  // 2. Effect를 사용해 폼 데이터를 저장하세요.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  useEffect(function persistForm() {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    localStorage.setItem(&#39;formData&#39;, name);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  });</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  // 3. surname이라는 state 변수를 사용하세요.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  const [surname, setSurname] = useState(&#39;Poppins&#39;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  // 4. Effect를 사용해서 제목을 업데이트합니다.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  useEffect(function updateTitle() {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    document.title = name + &#39; &#39; + surname;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  });</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  // ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>그렇다면 React는 어떻게 특정 state가 어떤 <code>useState</code> 호출에 해당하는지 알 수 있을까요? <strong>정답은 React가 Hook이 호출되는 순서에 의존한다는 것입니다.</strong> 모든 렌더링에서 Hook의 호출 순서는 같기 때문에 예시가 올바르게 동작할 수 있습니다.</p>\n<pre class=\"grvsc-container abyss grvsc-ps-t4tStz\" data-language=\"\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">// ------------</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// 첫 번째 렌더링</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// ------------</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">useState(&#39;Mary&#39;)           // 1. &#39;Mary&#39;라는 name state 변수를 선언합니다.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">useEffect(persistForm)     // 2. 폼 데이터를 저장하기 위한 effect를 추가합니다.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">useState(&#39;Poppins&#39;)        // 3. &#39;Poppins&#39;라는 surname state 변수를 선언합니다.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">useEffect(updateTitle)     // 4. 제목을 업데이트하기 위한 effect를 추가합니다.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// -------------</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// 두 번째 렌더링</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// -------------</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">useState(&#39;Mary&#39;)           // 1. name state 변수를 읽습니다.(인자는 무시됩니다)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">useEffect(persistForm)     // 2. 폼 데이터를 저장하기 위한 effect가 대체됩니다.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">useState(&#39;Poppins&#39;)        // 3. surname state 변수를 읽습니다.(인자는 무시됩니다)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">useEffect(updateTitle)     // 4. 제목을 업데이트하기 위한 effect가 대체됩니다.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// ...</span></span></code></pre>\n<p>Hook의 호출 순서가 렌더링 간에 동일하다면 React는 지역적인 state를 각 Hook에 연동시킬 수 있습니다. 하지만 Hook을 조건문 안에서(예를 들어 <code>persistForm</code> effect) 호출한다면 어떤 일이 일어날까요?</p>\n<pre class=\"grvsc-container abyss grvsc-ps-t4tStz\" data-language=\"\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">  // 🔴 조건문에 Hook을 사용함으로써 첫 번째 규칙을 깼습니다</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  if (name !== &#39;&#39;) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    useEffect(function persistForm() {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      localStorage.setItem(&#39;formData&#39;, name);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    });</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span></code></pre>\n<p><code>name !== ''</code> 조건은 첫 번째 렌더링에서 <code>true</code> 기 때문에 Hook은 동작합니다. 하지만 사용자가 그다음 렌더링에서 폼을 초기화하면서 조건을 <code>false</code>로 만들 겁니다. 렌더링 간에 Hook을 건너뛰기 때문에 Hook 호출 순서는 달라지게 됩니다.</p>\n<pre class=\"grvsc-container abyss grvsc-ps-t4tStz\" data-language=\"\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">useState(&#39;Mary&#39;)           // 1. name state 변수를 읽습니다. (인자는 무시됩니다)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// useEffect(persistForm)  // 🔴 Hook을 건너뛰었습니다!</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">useState(&#39;Poppins&#39;)        // 🔴 2 (3이었던). surname state 변수를 읽는 데 실패했습니다.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">useEffect(updateTitle)     // 🔴 3 (4였던). 제목을 업데이트하기 위한 effect가 대체되는 데 실패했습니다.</span></span></code></pre>\n<p>React는 두 번째 <code>useState</code> Hook 호출에 대해 무엇을 반환할지 몰랐습니다. React는 이전 렌더링 때처럼 컴포넌트 내에서 두 번째 Hook 호출이 <code>persistForm</code> effect와 일치할 것이라 예상했지만 그렇지 않았습니다. 그 시점부터 건너뛴 Hook 다음에 호출되는 Hook이 순서가 하나씩 밀리면서 버그를 발생시키게 됩니다.</p>\n<p><strong>이것이 컴포넌트 최상위(the top of level)에서 Hook이 호출되어야만 하는 이유입니다.</strong> 조건부로 effect를 실행하기를 원한다면, 조건문을 Hook <em>내부에</em> 넣을 수 있습니다.</p>\n<pre class=\"grvsc-container abyss grvsc-ps-t4tStz\" data-language=\"\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">  useEffect(function persistForm() {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // 👍 더 이상 첫 번째 규칙을 어기지 않습니다</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (name !== &#39;&#39;) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      localStorage.setItem(&#39;formData&#39;, name);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  });</span></span></code></pre>\n<p><strong><a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">제공된 lint 규칙</a>을 활용한다면 이 문제에 대해 걱정할 필요는 없습니다.</strong> 그러나 이제 왜 Hook이 이런 식으로 동작하는지 그리고 이 규칙이 어떤 문제를 방지하는지 알고 있습니다.</p>\n<pre class=\"grvsc-container abyss grvsc-ps-t4tStz\" data-language=\"js\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">  </span><span class=\"grvsc-t9ljLd-15 grvsc-t9ljLd-i grvsc-t4tStz-9\">const</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> { slug } </span><span class=\"grvsc-t9ljLd-7 grvsc-t4tStz-9\">=</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-6 grvsc-t4tStz-5\">useParams</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">&lt;</span><span class=\"grvsc-t9ljLd-11 grvsc-t4tStz-10\">&#39;slug&#39;</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">&gt;(); </span><span class=\"grvsc-t9ljLd-3 grvsc-t4tStz-2\">// string | undefined</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">  </span><span class=\"grvsc-t9ljLd-7 grvsc-t4tStz-9\">if</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> (</span><span class=\"grvsc-t9ljLd-7 grvsc-t4tStz-9\">!</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">slug) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">    </span><span class=\"grvsc-t9ljLd-7 grvsc-t4tStz-9\">return</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-4 grvsc-t4tStz-3\">null</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">  </span><span class=\"grvsc-t9ljLd-15 grvsc-t9ljLd-i grvsc-t4tStz-9\">const</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> articleQuery </span><span class=\"grvsc-t9ljLd-7 grvsc-t4tStz-9\">=</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-6 grvsc-t4tStz-5\">useArticle</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">({ slug }); </span><span class=\"grvsc-t9ljLd-3 grvsc-t4tStz-2\">// { slug: string }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">  </span><span class=\"grvsc-t9ljLd-7 grvsc-t4tStz-9\">...</span></span></span></code></pre>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .abyss { background-color: #000c18; }\n  .abyss .grvsc-t9ljLd-i { font-style: italic; }\n  .abyss .grvsc-t9ljLd-1 { color: #6688CC; }\n  .abyss .grvsc-t9ljLd-15 { color: #9966B8; }\n  .abyss .grvsc-t9ljLd-7 { color: #225588; }\n  .abyss .grvsc-t9ljLd-6 { color: #DDBB88; }\n  .abyss .grvsc-t9ljLd-11 { color: #22AA44; }\n  .abyss .grvsc-t9ljLd-3 { color: #384887; }\n  .abyss .grvsc-t9ljLd-4 { color: #F280D0; }\n  .abyss .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n  body[data-theme=dark] .grvsc-ps-t4tStz { color: #ffffff; }\n  body[data-theme=dark] .grvsc-ps-t4tStz .grvsc-t4tStz-1 { color: #FFFFFF; }\n  body[data-theme=dark] .grvsc-ps-t4tStz .grvsc-t4tStz-9 { color: #EB7E81; }\n  body[data-theme=dark] .grvsc-ps-t4tStz .grvsc-t4tStz-5 { color: #BB97E7; }\n  body[data-theme=dark] .grvsc-ps-t4tStz .grvsc-t4tStz-10 { color: #9DCDF5; }\n  body[data-theme=dark] .grvsc-ps-t4tStz .grvsc-t4tStz-2 { color: #A19B8F; }\n  body[data-theme=dark] .grvsc-ps-t4tStz .grvsc-t4tStz-3 { color: #66B5F6; }\n  body[data-theme=dark] .grvsc-ps-t4tStz .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n</style>","frontmatter":{"title":"","desc":null,"thumbnail":null,"date":null,"category":null}}},"pageContext":{"slug":"/blog/react/Hook 사용 규칙/"}},"staticQueryHashes":["1840460387"]}
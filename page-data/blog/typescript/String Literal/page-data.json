{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/typescript/String Literal/","result":{"data":{"markdownRemark":{"html":"<h2>String Literal Type이란</h2>\n<p><code>string</code>타입이면서도 변수에 확정된 값을 지닌 타입이다. <code>string</code>타입 보다 <code>narrow</code>한 타입이다.</p>\n<h2>String Literal Type인지 확인 방법</h2>\n<pre class=\"grvsc-container abyss grvsc-ps-t4tStz\" data-language=\"ts\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-15 grvsc-t9ljLd-i grvsc-t4tStz-9\">var</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> xxx </span><span class=\"grvsc-t9ljLd-7 grvsc-t4tStz-9\">=</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-11 grvsc-t4tStz-10\">&quot;xxx&quot;</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-3 grvsc-t4tStz-2\">// var xxx: string</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-15 grvsc-t9ljLd-i grvsc-t4tStz-9\">let</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> yyy </span><span class=\"grvsc-t9ljLd-7 grvsc-t4tStz-9\">=</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-11 grvsc-t4tStz-10\">&quot;yyy&quot;</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-3 grvsc-t4tStz-2\">// let yyy: string</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-15 grvsc-t9ljLd-i grvsc-t4tStz-9\">const</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> zzz </span><span class=\"grvsc-t9ljLd-7 grvsc-t4tStz-9\">=</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-11 grvsc-t4tStz-10\">&quot;zzz&quot;</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-3 grvsc-t4tStz-2\">// const zzz: &quot;zzz&quot;</span></span></span></code></pre>\n<p><code>vscode</code>와 같은 IDE에서 해당 변수에 마우스를 가져다대면 타입이 유추된다.\n타입이 값으로 나오는 경우가 <code>String Literal Type</code>이다.</p>\n<h2>String Literal Type은 되고 String은 안된다.</h2>\n<p>설명에 필요한 <code>obj</code>객체이다.</p>\n<pre class=\"grvsc-container abyss grvsc-ps-t4tStz\" data-language=\"ts\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-15 grvsc-t9ljLd-i grvsc-t4tStz-9\">const</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> obj </span><span class=\"grvsc-t9ljLd-7 grvsc-t4tStz-9\">=</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">  foo: </span><span class=\"grvsc-t9ljLd-11 grvsc-t4tStz-10\">&quot;hello&quot;</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">, </span><span class=\"grvsc-t9ljLd-3 grvsc-t4tStz-2\">// string</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">  bar: </span><span class=\"grvsc-t9ljLd-4 grvsc-t4tStz-3\">12345</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">, </span><span class=\"grvsc-t9ljLd-3 grvsc-t4tStz-2\">// number</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">  baz: </span><span class=\"grvsc-t9ljLd-4 grvsc-t4tStz-3\">true</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">, </span><span class=\"grvsc-t9ljLd-3 grvsc-t4tStz-2\">// boolean</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">}</span></span></span></code></pre>\n<p><code>obj[key]</code> 은 키값에 따라서 <code>string</code>, <code>number</code>, <code>boolean</code>, <code>undefined</code>타입이 될 수 있다.\n여기서 <code>obj[key]</code>값이 어떤 타입인지 추론하는데 두가지 방법이 있다.</p>\n<ol>\n<li>1 - 인덱스 시그니쳐(index signature)를 사용하는 방법</li>\n<li>2 - <code>key</code>타입을 String Literal 타입으로 설정</li>\n</ol>\n<p>1번 인덱스 시그니쳐는 default 타입을 설정하는 방식이라 보면 된다.<br>\nString Literal타입과 관련 되어있는 2번 케이스를 보자.</p>\n<p>타입스크립트는 <code>key</code>타입이 <code>String Literal</code> 타입이라면 해당 객체의 속성타입을 추론할 수 있다. key값이 변하지 않으면 해당 value의 타입도 그대로 가져올 수 있기 때문이다.<br>\n반면에 <code>string</code>타입은 확정된 값이 아니기 때문에 어떠한 문자든 올 수 있으므로 인덱스 시그니쳐 외 방법으로는 타입추론이 불가하다.</p>\n<blockquote>\n<p>인덱스 시그니쳐를 사용하지 않았을 경우 객체의 키값으로 String이 아닌 String Literal타입이 와야 한다.</p>\n</blockquote>\n<h2>String Literal Type &#x26; String 예시</h2>\n<pre class=\"grvsc-container abyss grvsc-ps-t4tStz\" data-language=\"ts\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-15 grvsc-t9ljLd-i grvsc-t4tStz-9\">const</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> fooKey </span><span class=\"grvsc-t9ljLd-7 grvsc-t4tStz-9\">=</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-11 grvsc-t4tStz-10\">&quot;foo&quot;</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-3 grvsc-t4tStz-2\">// &#39;foo&#39; -&gt; string literal type</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-15 grvsc-t9ljLd-i grvsc-t4tStz-9\">let</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> barKey </span><span class=\"grvsc-t9ljLd-7 grvsc-t4tStz-9\">=</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-11 grvsc-t4tStz-10\">&quot;bar&quot;</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-3 grvsc-t4tStz-2\">// string type</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-15 grvsc-t9ljLd-i grvsc-t4tStz-9\">const</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> obj </span><span class=\"grvsc-t9ljLd-7 grvsc-t4tStz-9\">=</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">  foo: </span><span class=\"grvsc-t9ljLd-11 grvsc-t4tStz-10\">&quot;hello&quot;</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">, </span><span class=\"grvsc-t9ljLd-3 grvsc-t4tStz-2\">// string</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">  bar: </span><span class=\"grvsc-t9ljLd-4 grvsc-t4tStz-3\">12345</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">, </span><span class=\"grvsc-t9ljLd-3 grvsc-t4tStz-2\">// number</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">  baz: </span><span class=\"grvsc-t9ljLd-4 grvsc-t4tStz-3\">true</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">, </span><span class=\"grvsc-t9ljLd-3 grvsc-t4tStz-2\">// boolean</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">obj[fooKey] </span><span class=\"grvsc-t9ljLd-3 grvsc-t4tStz-2\">// Ok</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">obj[barkey] </span><span class=\"grvsc-t9ljLd-3 grvsc-t4tStz-2\">// Error</span></span></span></code></pre>\n<p>위의 예제 <code>obj[barkey]</code>부분에서 에러가 났다.</p>\n<blockquote>\n<p>Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ foo: string; bar: number; baz: boolean; }'.<br>\nNo index signature with a parameter of type 'string' was found on type '{ foo: string; bar: number; baz: boolean; }'.ts(7053)</p>\n</blockquote>\n<p>해당 에러는 <code>key</code>타입이 <code>string</code>타입인데 인덱스 시그니쳐(index signature)가 없다는 것이다.\nString Literal과 관련하여 다시 풀어말하면,\n<code>barKey</code>는 String Literal타입이 아니고 String 타입이라는 것이다.</p>\n<p><code>let,var</code>키워드로 선언한 변수는 재할당이 가능하다. 따라서 타입스크립트는 해당 값이 변할 수 있다고 판단하므로 <code>string</code>타입으로 정한다.\n반면에 <code>const</code>타입으로 정한 값은 재할당이 불가하므로 <code>String Literal</code>타입이 된다.\n따라서 <code>barKey</code>는 <code>let</code>키워드로 작성되었기 때문에 값이 변할 수 있다고 보고 string타입으로 추론한 것이다.</p>\n<h2>String Literal Type의 활용</h2>\n<p>String Literal Type은 Union Type과 궁합이 잘 맞는다.\n같이 사용하면 <code>Enum</code>을 대체하여 사용할 수 있다.</p>\n<pre class=\"grvsc-container abyss grvsc-ps-t4tStz\" data-language=\"ts\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-15 grvsc-t9ljLd-i grvsc-t4tStz-9\">enum</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-5 grvsc-t9ljLd-u grvsc-t4tStz-5\">Keys</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">  FOO </span><span class=\"grvsc-t9ljLd-7 grvsc-t4tStz-9\">=</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-11 grvsc-t4tStz-10\">&quot;foo&quot;</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">  BAR </span><span class=\"grvsc-t9ljLd-7 grvsc-t4tStz-9\">=</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-11 grvsc-t4tStz-10\">&quot;bar&quot;</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t9ljLd-15 grvsc-t9ljLd-i grvsc-t4tStz-9\">type</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-5 grvsc-t9ljLd-u grvsc-t4tStz-5\">Keys</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-7 grvsc-t4tStz-9\">=</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-11 grvsc-t4tStz-10\">&quot;foo&quot;</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-7 grvsc-t4tStz-9\">|</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-11 grvsc-t4tStz-10\">&quot;bar&quot;</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-7 grvsc-t4tStz-9\">|</span><span class=\"grvsc-t9ljLd-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-t9ljLd-11 grvsc-t4tStz-10\">&quot;baz&quot;</span></span></span></code></pre>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .abyss { background-color: #000c18; }\n  .abyss .grvsc-t9ljLd-u {\n    text-decoration: underline;\n    text-underline-position: under;\n  }\n  .abyss .grvsc-t9ljLd-i { font-style: italic; }\n  .abyss .grvsc-t9ljLd-15 { color: #9966B8; }\n  .abyss .grvsc-t9ljLd-1 { color: #6688CC; }\n  .abyss .grvsc-t9ljLd-7 { color: #225588; }\n  .abyss .grvsc-t9ljLd-11 { color: #22AA44; }\n  .abyss .grvsc-t9ljLd-3 { color: #384887; }\n  .abyss .grvsc-t9ljLd-4 { color: #F280D0; }\n  .abyss .grvsc-t9ljLd-5 { color: #FFEEBB; }\n  .abyss .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n  body[data-theme=dark] .grvsc-ps-t4tStz { color: #ffffff; }\n  body[data-theme=dark] .grvsc-ps-t4tStz .grvsc-t4tStz-9 { color: #EB7E81; }\n  body[data-theme=dark] .grvsc-ps-t4tStz .grvsc-t4tStz-1 { color: #FFFFFF; }\n  body[data-theme=dark] .grvsc-ps-t4tStz .grvsc-t4tStz-10 { color: #9DCDF5; }\n  body[data-theme=dark] .grvsc-ps-t4tStz .grvsc-t4tStz-2 { color: #A19B8F; }\n  body[data-theme=dark] .grvsc-ps-t4tStz .grvsc-t4tStz-3 { color: #66B5F6; }\n  body[data-theme=dark] .grvsc-ps-t4tStz .grvsc-t4tStz-5 { color: #BB97E7; }\n  body[data-theme=dark] .grvsc-ps-t4tStz .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n</style>","frontmatter":{"title":"[Typescript] String Literal 관련하여","desc":"","thumbnail":null,"date":"2022-09-26","category":"TECHNOLOGY"}}},"pageContext":{"slug":"/blog/typescript/String Literal/"}},"staticQueryHashes":["1840460387"]}